#!/usr/bin/env python3

import logging
import configparser
import MySQLdb as mariadb
import argparse

from sense_hat import SenseHat
from time import sleep, strftime
from datetime import datetime

def get_temperature(sense, offset):
    return sense.get_temperature() - offset

def update_database(db, temperature):
    cursor = db.cursor()

    statement = """
    INSERT INTO coldroomtemperatures(ColdRoomSensorNumber, RecordedWhen, Temperature, ValidFrom, ValidTo)
    VALUES(%s, %s, %s, %s, %s)
    """
    values = (1, datetime.now(), temperature, datetime.now(), '9999-12-31 23:59:59')
    try:
        cursor.execute(statement, values)
        db.commit()
    except Exception as err:
        logging.error(f'Could not insert temperature into database: {err}')

    logging.info(f'Inserted temperature {temperature} into database')

def archive_temperature(db):
    cursor = db.cursor()
    statement = """
    UPDATE coldroomtemperatures SET ValidTo = %s;
    """
    date = strftime('%Y-%m-%d %H:%M:%S')
    cursor.execute(statement, (date,))
    statement = """
    INSERT INTO coldroomtemperatures_archive (SELECT * FROM coldroomtemperatures);
    """
    cursor.execute(statement)
    statement = """
    DELETE FROM coldroomtemperatures;
    """
    cursor.execute(statement)
    try:
        db.commit()
    except Exception as err:
        logging.error(f'Could not archive temperatures: {err}')


    logging.info('Archived temperatures')

def main():
    parser = argparse.ArgumentParser()
    parser.parse_args()
    
    config = configparser.ConfigParser()
    config.read('/etc/nerdytemp/nerdytemp.ini')
    logging.basicConfig(level=logging.INFO)

    sense = SenseHat()
    try:
        db = mariadb.connect(
            host=config['db']['host'],
            port=int(config['db']['port']),
            user=config['db']['user'],
            password=config['db']['password'],
            database=config['db']['db']
        )
    except Exception as err:
        logging.error(f'Could not connect to database: {err}')
        exit(1)

    while True:
        archive_temperature(db)
        update_database(db, get_temperature(sense, int(config['nerdytemp']['offset'])))
        sleep(int(config['nerdytemp']['interval']))

    db.close()

if __name__ == '__main__':
    main()
