#!/usr/bin/env python3

import logging
import configparser
import MySQLdb as mariadb
import argparse

from sense_hat import SenseHat
from time import sleep, strftime
from datetime import datetime

def get_temperature(sense, offset) -> float:
    """Get temperature from SenseHat pressure sensor

    Args:
        sense: instance of SenseHat class
        offset (int): integer to be subtracted for improved accuracy

    Returns:
        float: measured and adjusted temperature
    """    
    return float(sense.get_temperature_from_pressure()) - int(offset)


def update_temperature(db, temperature) -> bool:
    """Updates coldroom temperature in database and archives old temperature
    using the 'update_temperature' procedure:

    PROCEDURE `update_temperature`(
        IN sensor_number INT(11),
        IN recorded_when datetime,
        IN temperature decimal(10,2),
        IN valid_from datetime,
        IN valid_to datetime
    )

    Args:
        db: MariaDB connection
        temperature (float): temperature to archive

    Returns:
        bool: True on success, False on failure
    """    
    try:
        cursor = db.cursor()
        statement = """
        CALL update_temperature(%s, %s, %s, %s, %s)
        """
        values = (
            1,
            datetime.now(), 
            temperature,
            datetime.now(),
            '9999-12-31 23:59:59'
        )
        cursor.execute(statement, values)
        db.commit()
    except Exception as err:
        logging.error(f'Could not update temperature in database: {err}')
        return False
    
    logging.info(f'Updated temperature to {temperature}')
    return True

def connect_to_database(config):
    """Continuously attempt to connect to database using provided configuration.

    Args:
        config (object): containing: host, port, user, password, db

    Returns:
        MariaDB instance: a valid MariaDB connection
    """    
    db = False
    while not db:
        try:
            db = mariadb.connect(
                host=config['host'],
                port=int(config['port']),
                user=config['user'],
                password=config['password'],
                database=config['db']
            )
            return db
        except Exception as err:
            logging.error(f'Could not connect to database: {err}')
            db = False
        
        sleep(int(config['reconnect-interval']))

def main():
    """Reads configuration and continuously updates temperature
    """    
    parser = argparse.ArgumentParser()
    parser.parse_args()
    
    config = configparser.ConfigParser()
    config.read('/etc/nerdytemp/nerdytemp.ini')

    logging.basicConfig(level=logging.INFO)

    sense = SenseHat()
    db = connect_to_database(config['db'])
    while True:
        if not update_temperature(db, get_temperature(sense, int(config['nerdytemp']['offset']))):
            db = connect_to_database(config['db'])

        sleep(int(config['nerdytemp']['interval']))

    db.close()

if __name__ == '__main__':
    main()
